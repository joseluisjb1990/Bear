Programa -> def 'oso' inst

inst -> '{' listaDef listaInst '}'
     |  'para' ID 'en' '(' Expresion ',' Expresion ')' 'hacer' inst
     |  'para' ID 'en' '(' Expresion ',' Expresion ',' Expresion ')' 'hacer' inst
     |  listaID = listaExpresiones
     |  'leer' '(' ID ')'
     |  escribir '(' Expresion ')'
     |  iteracionIndeter
     |  'vomita'
     |  'vomita' ID
     |  'fondoBlanco'
     |  'fondoBlanco' ID
     |  'roloePea'
     |  'roloePea' ID
     |  'si' ExpresionBooleana 'entonces' inst 'sino' inst 'fin'
     |  'si' ExpresionBooleana 'entonces' inst 'fin'

Expresion -> Entero
          |  Flotante
          |  Funcion
          |  ExpresionBooleana
          |  ExpresionAritmetica
          |  String
          |  Char
          |  ExpresionBooleana '?' Expresion ':' Expresion

ExpresionAritmetica -> Expresion '+' Expresion
  | Expresion '-' Expresion
  | Expresion '**' Expresion
  | Expresion '*' Expresion
  | Expresion '/' Expresion
  | '-' Expresion
  | ID++
  | ID--

ExpresionBooleana -> True
  | False
  | Expresion '<' Expresion
  | Expresion '<=' Expresion
  | Expresion '>' Expresion
  | Expresion '>=' Expresion
  | Expresion '==' Expresion
  | Expresion '=/=' Expresion
  | Expresion '|' Expresion
  | Expresion '&' Expresion
  | 'no' Expresion

Funcion ->  ID '(' parametros ')'

parametros -> listaID
           |

iteracionIndeter -> ID ':' 'mientras' '(' ExpresionBooleana ')' 'hacer' inst
                 |  'mientras' '(' ExpresionBooleana ')' 'hacer' inst

def -> listaDefGlob
    |

listaDefGlob -> defGlob ';'
             |  listaDefGlob defGlob ';'

defGlob -> defConstante
        |  defVariable
        |  defFuncion

defFuncion -> ID '(' listaParam ')' '=>' TIPO
           |  ID '(' listaParam ')' '=>' TIPO inst

listaParam -> Paramatero
           |  listaParam, Parametro

Parametro -> TIPO ID
          |  paramCueva TIPO ID

paramCueva -> cueva [] 'de'
           |  paramCueva cueva '[' Num ']' 'de'

defConstante -> 'const' TIPO ListaID = ListaExpresiones

listaDef -> defVariable;
         |  listaDef defVariable;

defVariable -> TIPO ListaID = ListaExpresiones
            |  TIPO ListaID
            |  defCueva
            |  defCompleja

defCompleja -> 'pardo'   '{' listaDef '}'
            |  'pardo'   '{' listaDef '}' listaID
            |  'grizzli' '{' listaDef '}'

defCueva ->  cuevas TIPO ID

cuevas -> 'cueva' '[' Num ']' 'de'
       |  cuevas 'cueva' '[' Num ']'  'de'

ListaID -> ID
        |  ListaID, ID

ListaExpresiones -> Expresion
                 |  ListaExpresiones, Expresion
