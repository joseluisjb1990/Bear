S -> def 'oso' inst

inst ->
    '{' listaDef listaInst '}'
  | 'para' ID 'en' '(' Expresion ',' Expresion ')' 'hacer' inst
  | 'para' ID 'en' '(' Expresion ',' Expresion ',' Expresion ')' 'hacer' inst
  | listaID = listaExpresiones
  | 'leer' '(' ID ')'
  | escribir '(' Expresion ')'
  | iteraionIndeter
  | 'si' '(' expresionBooleana ')' 'entonces' isnt
  | 'vomita'
  | 'vomita' ID
  | 'fondoBlanco'
  | 'fondoBlanco' ID
  | 'roloePea'
  | 'roloePea' ID

Expresion ->
    Funcion
  | expresionBooleana
  | expresionAritmetica
  | String
  | Char
  | '(' Expresion ')'

expresionAritmetica ->
    Entero
  | Flotante
  | Expresion   '+'   Expresion
  | Expresion   '-'   Expresion
  | Expresion   '**'  Expresion
  | Expresion   '*'   Expresion
  | Expresion   '/'   Expresion
  | '-' Expresion
  | ID++
  | ID--

expresionBooleana ->
    True
  | False
  | Expresion   '<'   Expresion
  | Expresion   '<='  Expresion
  | Expresion   '>'   Expresion
  | Expresion   '>='  Expresion
  | Expresion   '=='  Expresion
  | Expresion   '=/=' Expresion
  | Expresion   '|'   Expresion
  | Expresion   '&'   Expresion
  | 'no' Expresion

Funcion ->
    ID '(' parametros ')'
  | 'a_hormiguero'  '(' Expresion')'
  | 'a_polar'       '(' Expresion ')'
  | 'a_malayo'      '(' Expresion ')'
  | 'a_polar'       '(' Expresion ')'

parametros ->
  /* Vacio *\
  | listaID

iteracionIndeter ->
  | ID ':' 'mientras' '(' expresionBooleana ')' 'hacer' inst
  | 'mientras' '(' expresionBooleana ')' 'hacer' inst

def ->
  /* Vacio *\
  | listaDefGlob

listaDefGlob ->
    defGlob;
  | listaDefGlob defGlob;

defGlob ->
    defConstante
  | defVariable
  | defFuncion

defFuncion ->
    ID '(' listaParam ')' '=>' TIPO
  | ID '(' listaParam ')' '=>' TIPO inst

listaParam ->
    Paramatero
  | listaParam, Parametro

Parametro ->
    TIPO ID
  | paramCueva TIPO ID

paramCueva
    cueva [] 'de'
  | paramCueva cueva '[' Num ']' 'de'

defConstante ->
    'const' TIPO ListaID = ListaExpresiones

listaDef ->
    defVariable;
  | listaDef defVariable;

defVariable ->
    TIPO ListaID = ListaExpresiones
  | TIPO ListaID
  | defCueva
  | defCompleja

defCompleja ->
    'pardo'   '{' listaDef '}'
  | 'pardo'   '{' listaDef '}' listaID
  | 'grizzli' '{' listaDef '}'

defCueva ->  cuevas TIPO ID

cuevas ->
   'cueva' '[' Num ']' 'de'
  | cuevas 'cueva' '[' Num ']'  'de'

ListaID ->
    ID
  | ListaID, ID

ListaExpresiones ->
    Expresion
  | ListaExpresiones, Expresion
